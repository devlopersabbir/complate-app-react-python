[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "loadDotenv",
        "importPath": "app.utils.loadDotenv",
        "description": "app.utils.loadDotenv",
        "isExtraImport": true,
        "detail": "app.utils.loadDotenv",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "isExtraImport": true,
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "isExtraImport": true,
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "isExtraImport": true,
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.services.services",
        "description": "app.services.services",
        "isExtraImport": true,
        "detail": "app.services.services",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ERoles",
        "importPath": "app.utils.common",
        "description": "app.utils.common",
        "isExtraImport": true,
        "detail": "app.utils.common",
        "documentation": {}
    },
    {
        "label": "ERoles",
        "importPath": "app.utils.common",
        "description": "app.utils.common",
        "isExtraImport": true,
        "detail": "app.utils.common",
        "documentation": {}
    },
    {
        "label": "BaseModels",
        "importPath": "app.models.baseModel",
        "description": "app.models.baseModel",
        "isExtraImport": true,
        "detail": "app.models.baseModel",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "get_users",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "update_user",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "write_user",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "find_by_username",
        "importPath": "app.libs.reuses",
        "description": "app.libs.reuses",
        "isExtraImport": true,
        "detail": "app.libs.reuses",
        "documentation": {}
    },
    {
        "label": "find_by_uuid",
        "importPath": "app.libs.reuses",
        "description": "app.libs.reuses",
        "isExtraImport": true,
        "detail": "app.libs.reuses",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "find_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "userRoutes",
        "importPath": "app.routes",
        "description": "app.routes",
        "isExtraImport": true,
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "engine = create_engine(DABABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "peekOfCode": "def get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(User).offset(skip).limit(limit).all()\ndef write_user(db: Session, user: UserSchema):\n    db_user = User(\n        name=user.name,\n        username=user.username,\n        email=user.email,\n        password=hash_password(user.password),\n        role=user.role\n    )",
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "write_user",
        "kind": 2,
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "peekOfCode": "def write_user(db: Session, user: UserSchema):\n    db_user = User(\n        name=user.name,\n        username=user.username,\n        email=user.email,\n        password=hash_password(user.password),\n        role=user.role\n    )\n    db.add(db_user)\n    db.commit()",
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "peekOfCode": "def update_user(db: Session, user_data: UserUpdateSchema, isUser: User):\n    for key, value in user_data.dict().items():\n        if value:\n            setattr(isUser, key, value)\n    db.commit()\n    db.refresh(isUser)\n    return isUser",
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "find_by_username",
        "kind": 2,
        "importPath": "app.libs.reuses",
        "description": "app.libs.reuses",
        "peekOfCode": "def find_by_username(query_db: Session, query_model: User, query_with: UserSchema) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.username == query_with.username).first()\ndef find_by_email(query_db: Session, query_model: User, query_with: UserSchema) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.email == query_with.email).first()\ndef find_by_uuid(query_db: Session, query_model: User, uuid: str) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.uuid == uuid).first()",
        "detail": "app.libs.reuses",
        "documentation": {}
    },
    {
        "label": "find_by_email",
        "kind": 2,
        "importPath": "app.libs.reuses",
        "description": "app.libs.reuses",
        "peekOfCode": "def find_by_email(query_db: Session, query_model: User, query_with: UserSchema) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.email == query_with.email).first()\ndef find_by_uuid(query_db: Session, query_model: User, uuid: str) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.uuid == uuid).first()",
        "detail": "app.libs.reuses",
        "documentation": {}
    },
    {
        "label": "find_by_uuid",
        "kind": 2,
        "importPath": "app.libs.reuses",
        "description": "app.libs.reuses",
        "peekOfCode": "def find_by_uuid(query_db: Session, query_model: User, uuid: str) -> bool:\n    return query_db.query(query_model).filter(\n        query_model.uuid == uuid).first()",
        "detail": "app.libs.reuses",
        "documentation": {}
    },
    {
        "label": "BaseModels",
        "kind": 6,
        "importPath": "app.models.baseModel",
        "description": "app.models.baseModel",
        "peekOfCode": "class BaseModels(Base):\n    __abstract__ = True\n    id = Column(Integer, primary_key=True, index=True)\n    uuid = Column(String(36), unique=True, default=lambda: str(uuid.uuid4()))\n    created_at = Column(DateTime, default=datetime.datetime.now())\n    updated_at = Column(DateTime, default=datetime.datetime.now(),\n                        onupdate=datetime.datetime.now())",
        "detail": "app.models.baseModel",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "peekOfCode": "class User(BaseModels):\n    __tablename__ = \"Users\"\n    name = Column(String(256), nullable=True)\n    username = Column(String(256), unique=True)\n    email = Column(String(256), unique=True)\n    password = Column(String(256))\n    role = Column(Enum(ERoles), default=ERoles.USER)",
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.authRoutes",
        "description": "app.routes.authRoutes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\")\nasync def login():\n    return {\n        \"login\": True\n    }",
        "detail": "app.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.userRoutes",
        "description": "app.routes.userRoutes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", tags=[\"Get User\"])\nasync def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = get_users(db, skip=skip, limit=limit)\n    if not users:\n        return JSONResponse(\n            content={\n                \"message\": \"No user found!\",\n            },\n            status_code=status.HTTP_404_NOT_FOUND",
        "detail": "app.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "peekOfCode": "class UserSchema(BaseModel):\n    name: str\n    username: str\n    email: str\n    password: str\n    role: str = ERoles\nclass UserUpdateSchema(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n    username: Optional[str] = None",
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "kind": 6,
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "peekOfCode": "class UserUpdateSchema(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n    username: Optional[str] = None\n    role: Optional[str] = None\n    password: Optional[str] = None",
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app.services.services",
        "description": "app.services.services",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return password_context.hash(password)\ndef verify_password(plainPassword: str, hashedPassword: str) -> bool:\n    return password_context.verify(plainPassword, hashedPassword)",
        "detail": "app.services.services",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.services.services",
        "description": "app.services.services",
        "peekOfCode": "def verify_password(plainPassword: str, hashedPassword: str) -> bool:\n    return password_context.verify(plainPassword, hashedPassword)",
        "detail": "app.services.services",
        "documentation": {}
    },
    {
        "label": "password_context",
        "kind": 5,
        "importPath": "app.services.services",
        "description": "app.services.services",
        "peekOfCode": "password_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash_password(password: str) -> str:\n    return password_context.hash(password)\ndef verify_password(plainPassword: str, hashedPassword: str) -> bool:\n    return password_context.verify(plainPassword, hashedPassword)",
        "detail": "app.services.services",
        "documentation": {}
    },
    {
        "label": "ERoles",
        "kind": 6,
        "importPath": "app.utils.common",
        "description": "app.utils.common",
        "peekOfCode": "class ERoles(PyEnum):\n    USER = \"USER\"\n    ADMIN = \"ADMIN\"\n    VENDOR = \"VENDOR\"",
        "detail": "app.utils.common",
        "documentation": {}
    },
    {
        "label": "loadDotenv",
        "kind": 2,
        "importPath": "app.utils.loadDotenv",
        "description": "app.utils.loadDotenv",
        "peekOfCode": "def loadDotenv():\n    load_dotenv(find_dotenv())",
        "detail": "app.utils.loadDotenv",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(userRoutes.router, prefix=\"/api/v1/users\")\n@app.get(\"/\", tags=[\"Checker\"])\nasync def checker():\n    return JSONResponse(\n        content={\n            \"Working\": True,\n            \"Hello\": \"World\"\n        }\n    )",
        "detail": "main",
        "documentation": {}
    }
]