[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "find_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "isExtraImport": true,
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "isExtraImport": true,
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "isExtraImport": true,
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "get_users",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "write_user",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "write_user",
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "isExtraImport": true,
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "userRoutes",
        "importPath": "app.routes",
        "description": "app.routes",
        "isExtraImport": true,
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "engine = create_engine(DABABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.configs.database",
        "description": "app.configs.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.configs.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "peekOfCode": "def get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(User).offset(skip).limit(limit).all()\ndef write_user(db: Session, user: UserCreate):\n    fake_hashed_password = user.password + \"___notreallyhashed\"\n    db_user = User(\n        email=user.email,\n        password=fake_hashed_password\n    )\n    db.add(db_user)\n    db.commit()",
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "write_user",
        "kind": 2,
        "importPath": "app.controllers.userController",
        "description": "app.controllers.userController",
        "peekOfCode": "def write_user(db: Session, user: UserCreate):\n    fake_hashed_password = user.password + \"___notreallyhashed\"\n    db_user = User(\n        email=user.email,\n        password=fake_hashed_password\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user",
        "detail": "app.controllers.userController",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.userModel",
        "description": "app.models.userModel",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"Users\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String(256), unique=True, index=True)\n    password = Column(String(256))\n    is_active = Column(Boolean, default=True)",
        "detail": "app.models.userModel",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.authRoutes",
        "description": "app.routes.authRoutes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\")\nasync def login():\n    return {\n        \"login\": True\n    }",
        "detail": "app.routes.authRoutes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.userRoutes",
        "description": "app.routes.userRoutes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", tags=[\"Get User\"])\nasync def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = get_users(db, skip=skip, limit=limit)\n    if not users:\n        return JSONResponse(\n            content={\n                \"message\": \"No user found!\",\n            },\n            status_code=status.HTTP_404_NOT_FOUND",
        "detail": "app.routes.userRoutes",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "peekOfCode": "class UserBase(BaseModel):\n    email: str\nclass UserCreate(UserBase):\n    password: str\nclass UserSchema():\n    id: int\n    is_active: bool",
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "peekOfCode": "class UserCreate(UserBase):\n    password: str\nclass UserSchema():\n    id: int\n    is_active: bool",
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "app.schemas.userSchema",
        "description": "app.schemas.userSchema",
        "peekOfCode": "class UserSchema():\n    id: int\n    is_active: bool",
        "detail": "app.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(userRoutes.router, prefix=\"/api/v1/users\")\n@app.get(\"/\", tags=[\"Checker\"])\nasync def checker():\n    return JSONResponse(\n        content={\n            \"Working\": True,\n            \"Hello\": \"World\"\n        }\n    )",
        "detail": "main",
        "documentation": {}
    }
]